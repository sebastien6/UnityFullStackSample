// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamesServiceClient is the client API for GamesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamesServiceClient interface {
	// list all registered Games
	GetGames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Games, error)
	// Register a new Game
	RegisterGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	// Register a list of new Game
	RegisterGames(ctx context.Context, in *Games, opts ...grpc.CallOption) (*Games, error)
}

type gamesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamesServiceClient(cc grpc.ClientConnInterface) GamesServiceClient {
	return &gamesServiceClient{cc}
}

func (c *gamesServiceClient) GetGames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Games, error) {
	out := new(Games)
	err := c.cc.Invoke(ctx, "/listing.v1.GamesService/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesServiceClient) RegisterGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/listing.v1.GamesService/RegisterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesServiceClient) RegisterGames(ctx context.Context, in *Games, opts ...grpc.CallOption) (*Games, error) {
	out := new(Games)
	err := c.cc.Invoke(ctx, "/listing.v1.GamesService/RegisterGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamesServiceServer is the server API for GamesService service.
// All implementations must embed UnimplementedGamesServiceServer
// for forward compatibility
type GamesServiceServer interface {
	// list all registered Games
	GetGames(context.Context, *emptypb.Empty) (*Games, error)
	// Register a new Game
	RegisterGame(context.Context, *Game) (*Game, error)
	// Register a list of new Game
	RegisterGames(context.Context, *Games) (*Games, error)
	mustEmbedUnimplementedGamesServiceServer()
}

// UnimplementedGamesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGamesServiceServer struct {
}

func (UnimplementedGamesServiceServer) GetGames(context.Context, *emptypb.Empty) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedGamesServiceServer) RegisterGame(context.Context, *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGame not implemented")
}
func (UnimplementedGamesServiceServer) RegisterGames(context.Context, *Games) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGames not implemented")
}
func (UnimplementedGamesServiceServer) mustEmbedUnimplementedGamesServiceServer() {}

// UnsafeGamesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamesServiceServer will
// result in compilation errors.
type UnsafeGamesServiceServer interface {
	mustEmbedUnimplementedGamesServiceServer()
}

func RegisterGamesServiceServer(s grpc.ServiceRegistrar, srv GamesServiceServer) {
	s.RegisterService(&GamesService_ServiceDesc, srv)
}

func _GamesService_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServiceServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing.v1.GamesService/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServiceServer).GetGames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GamesService_RegisterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServiceServer).RegisterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing.v1.GamesService/RegisterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServiceServer).RegisterGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _GamesService_RegisterGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Games)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServiceServer).RegisterGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listing.v1.GamesService/RegisterGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServiceServer).RegisterGames(ctx, req.(*Games))
	}
	return interceptor(ctx, in, info, handler)
}

// GamesService_ServiceDesc is the grpc.ServiceDesc for GamesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listing.v1.GamesService",
	HandlerType: (*GamesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGames",
			Handler:    _GamesService_GetGames_Handler,
		},
		{
			MethodName: "RegisterGame",
			Handler:    _GamesService_RegisterGame_Handler,
		},
		{
			MethodName: "RegisterGames",
			Handler:    _GamesService_RegisterGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listing.proto",
}
